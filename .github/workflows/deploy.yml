name: Deploy to EC2 using AWS SSM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.EC2_REGION }}

      - name: Run script on EC2 using SSM
        id: run_command
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":["sudo -u ${{ secrets.EC2_USER }} -i bash -c \"cd '${{ secrets.EC2_PROJECT_DIR }}' && bash script.sh\""]}' \
            --comment "Run script.sh" \
            --query "Command.CommandId" \
            --output text)
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_ENV

      - name: Wait for command to finish
        run: |
          STATUS="InProgress"
          while [ "$STATUS" == "InProgress" ]; do
            echo "Checking command status..."
            STATUS=$(aws ssm get-command-invocation \
              --command-id ${{ env.COMMAND_ID }} \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "Status" \
              --output text)
            echo "Current status: $STATUS"
            sleep 5
          done

          if [ "$STATUS" != "Success" ]; then
            echo "Command failed with status: $STATUS"
            exit 1
          fi

      - name: Fetch command output
        run: |
          OUTPUT=$(aws ssm get-command-invocation \
            --command-id ${{ env.COMMAND_ID }} \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "StandardOutputContent" \
            --output text)
          echo "Standard Output:"
          echo "$OUTPUT"

          ERROR_OUTPUT=$(aws ssm get-command-invocation \
            --command-id ${{ env.COMMAND_ID }} \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "StandardErrorContent" \
            --output text)
          echo "Standard Error:"
          echo "$ERROR_OUTPUT"

          if [[ "$ERROR_OUTPUT" != "None" && -n "$ERROR_OUTPUT" ]]; then
            echo "Error detected:"
            echo "$ERROR_OUTPUT"
            exit 1
          else
            echo "No critical errors detected. Workflow succeeded."
            exit 0
          fi
