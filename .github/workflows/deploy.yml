name: Deploy React App and Services to EC2 using AWS SSM

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. AWS CLI 환경 설정
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.EC2_REGION }}

      # 2. 리포지토리 및 서브모듈 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # 3. Node.js 환경 설정 및 React 빌드
      - name: Build React App
        uses: actions/setup-node@v3
        with:
          node-version: 14
        run: |
          cd frontend
          npm install
          npm run build
          tar -czf build.tar.gz build

      # 4. EC2로 파일 업로드 (SSM을 사용한 직접 업로드)
      - name: Upload Build to EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ssm send-command \
            --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":[
              "mkdir -p /tmp/build",
              "cat > /tmp/build/build.tar.gz"
            ]}' \
            --comment "Uploading React build archive" \
            --output text <<< "$(cat frontend/build.tar.gz | base64 | tr -d '\n')"

      # 5. SSM을 통해 EC2에서 파일 압축 해제 및 스크립트 실행
      - name: Deploy via SSM
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":[
              "cd /tmp/build",
              "tar -xzf build.tar.gz -C /var/www/html",
              "cd /home/ec2-user/project",
              "bash script.sh"
            ]}' \
            --query "Command.CommandId" \
            --output text)
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_ENV

      # 6. 명령 상태 확인
      - name: Wait for command to finish
        run: |
          STATUS="InProgress"
          while [ "$STATUS" == "InProgress" ]; do
            echo "Checking command status..."
            STATUS=$(aws ssm get-command-invocation \
              --command-id ${{ env.COMMAND_ID }} \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "Status" \
              --output text)
            echo "Current status: $STATUS"
            sleep 5
          done

          if [ "$STATUS" != "Success" ]; then
            echo "Command failed with status: $STATUS"
            exit 1
          else
            echo "Command succeeded with status: $STATUS"
          fi
