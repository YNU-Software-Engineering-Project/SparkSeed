name: Deploy React App and Services to EC2 using AWS SSM

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Node.js 환경 설정
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      # 3. React 빌드
      - name: Build React App
        run: |
          cd frontend
          npm install
          npm run build
          tar -czf build.tar.gz build

      # 4. 빌드된 결과물을 EC2로 업로드
      - name: Upload Build to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_PUBLIC_IP }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          scp -o StrictHostKeyChecking=no -i <(echo "$SSH_PRIVATE_KEY") frontend/build.tar.gz $EC2_USER@$EC2_HOST:/tmp/

      # 5. EC2에서 스크립트 실행
      - name: Deploy to EC2 using SSM
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":[
              "sudo -u ${{ secrets.EC2_USER }} -i bash -c \"cd '${{ secrets.EC2_PROJECT_DIR }}' && bash script.sh\""
            ]}' \
            --comment "Deploy services and frontend" \
            --query "Command.CommandId" \
            --output text)
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_ENV

      # 6. 명령 상태 확인
      - name: Wait for command to finish
        run: |
          STATUS="InProgress"
          while [ "$STATUS" == "InProgress" ]; do
            echo "Checking command status..."
            STATUS=$(aws ssm get-command-invocation \
              --command-id ${{ env.COMMAND_ID }} \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "Status" \
              --output text)
            echo "Current status: $STATUS"
            sleep 5
          done

          if [ "$STATUS" != "Success" ]; then
            echo "Command failed with status: $STATUS"
            exit 1
          else
            echo "Command succeeded with status: $STATUS"
          fi
